// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1.2 effective-5.10 (swiftlang-6.1.2.1.2 clang-1700.0.13.5)
// swift-module-flags: -target arm64-apple-ios15.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -module-name KoolingSDK
// swift-module-flags-ignorable:  -interface-compiler-version 6.1.2
import Alamofire
import AppleArchive
import CoreLocation.CLLocation
import Combine
import CoreData
import CoreLocation
import CoreMotion
import Foundation
import HealthKit
import Swift
import SwiftUI
import System
import UIKit
import UserNotifications
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public enum KoolingEnvironment : Swift.CaseIterable {
  case production
  case staging
  public static func == (a: KoolingSDK.KoolingEnvironment, b: KoolingSDK.KoolingEnvironment) -> Swift.Bool
  public typealias AllCases = [KoolingSDK.KoolingEnvironment]
  nonisolated public static var allCases: [KoolingSDK.KoolingEnvironment] {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers final public class KoolingSDKManager {
  public static let shared: KoolingSDK.KoolingSDKManager
  final public func configure(environment: KoolingSDK.KoolingEnvironment)
  final public var baseUrlString: Swift.String {
    get
  }
  final public func startTracking(token: Swift.String, viewController: UIKit.UIViewController?, trackingClosure: (() -> Swift.Void)?)
  final public func stopTracking(trackingClosure: (() -> Swift.Void)?)
  final public var isTracking: Swift.Bool {
    get
  }
  final public func log(_ message: Swift.String)
  final public func setupLog(issueLogClosure: ((Swift.String, Swift.String) -> Swift.Void)?)
  final public func showLoggerUI(rootViewController: UIKit.UIViewController)
  @objc deinit
}
public enum KoolingNetworkError : Foundation.LocalizedError {
  case invalidUrl
  case unauthorized
  case accessTokenIsNotPresent
  case getAccessTokenFailed
  case noInternetConnection
  case requestTimedOut
  case majorUpdateRequired
  case apiError(statusCode: Swift.Int, errorMessage: Swift.String? = nil)
  case unknownError(underlyingError: (any Swift.Error)?)
}
extension KoolingSDK.KoolingNetworkError {
  public var errorDescription: Swift.String? {
    get
  }
}
extension Alamofire.AFError {
  public func toNetworkError(message: Swift.String?) -> KoolingSDK.KoolingNetworkError
}
public protocol KoolingNetworkClient : AnyObject {
  func send<E, D>(_ networkRequest: KoolingSDK.KoolingNetworkRequest<E>) async throws -> D where E : Swift.Encodable, D : Swift.Decodable
  func sendAuthenticated<E, D>(_ networkRequest: KoolingSDK.KoolingNetworkRequest<E>) async throws -> D where E : Swift.Encodable, D : Swift.Decodable
}
final public class KoolingNetworkClientImplementation {
  public init(baseUrlString: Swift.String, sessionConfiguration: Foundation.URLSessionConfiguration = .ephemeral, eventMonitors: [any Alamofire.EventMonitor] = [], jsonEncoder: Foundation.JSONEncoder = JSONEncoder(), jsonDecoder: Foundation.JSONDecoder = JSONDecoder(), parameterEncoder: Alamofire.URLEncodedFormParameterEncoder = .queryParameter)
  @objc deinit
}
extension KoolingSDK.KoolingNetworkClientImplementation : KoolingSDK.KoolingNetworkClient {
  final public func send<E, D>(_ networkRequest: KoolingSDK.KoolingNetworkRequest<E>) async throws -> D where E : Swift.Encodable, D : Swift.Decodable
  final public func sendAuthenticated<E, D>(_ networkRequest: KoolingSDK.KoolingNetworkRequest<E>) async throws -> D where E : Swift.Encodable, D : Swift.Decodable
}
public struct KoolingNetworkRequest<E> where E : Swift.Encodable {
  public let endpoint: Swift.String
  public let method: KoolingSDK.KoolingHttpMethod
  public let parameters: E
  public let acceptableStatusCodes: Swift.Range<Swift.Int>
  public let encoderType: KoolingSDK.KoolingEncoderType
  public init(endpoint: Swift.String, method: KoolingSDK.KoolingHttpMethod, parameters: E, acceptableStatusCodes: Swift.Range<Swift.Int> = 200 ..< 300, encoderType: KoolingSDK.KoolingEncoderType = .methodDefault)
}
public enum KoolingHttpMethod {
  case get
  case post
  case patch
  case put
  case delete
  public static func == (a: KoolingSDK.KoolingHttpMethod, b: KoolingSDK.KoolingHttpMethod) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum KoolingEncoderType {
  case queryParameter
  case json
  case methodDefault
  public static func == (a: KoolingSDK.KoolingEncoderType, b: KoolingSDK.KoolingEncoderType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension Alamofire.URLEncodedFormParameterEncoder {
  public static let queryParameter: Alamofire.URLEncodedFormParameterEncoder
}
public class KoolingNetworkApi {
  public init(with networkClient: any KoolingSDK.KoolingNetworkClient)
  @objc deinit
}
extension Foundation.Date {
  public static var sharedCalendar: Foundation.Calendar
  public var startOfToday: Foundation.Date {
    get
  }
  public var endOfToday: Foundation.Date {
    get
  }
  public var startOfTomorrow: Foundation.Date {
    get
  }
  public var endOfTomorrow: Foundation.Date {
    get
  }
  public var endOfYesterday: Foundation.Date {
    get
  }
  public func isSameDay(with date: Foundation.Date) -> Swift.Bool
}
extension Foundation.Date : Swift.Strideable {
  public typealias Stride = Foundation.TimeInterval
  public func distance(to other: Foundation.Date) -> Foundation.Date.Stride
  public func advanced(by n: Foundation.Date.Stride) -> Foundation.Date
}
@_inheritsConvenienceInitializers @objc(LocationEntityOld) public class LocationEntityOld : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension KoolingSDK.LocationEntityOld {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<KoolingSDK.LocationEntityOld>
  @objc @NSManaged dynamic public var accuracy: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var altitude: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var bluetooth: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var coarse: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var distance: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var id: Foundation.UUID? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var isSubmitted: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var latitude: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var longitude: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var motiontype: Swift.Int16 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var speed: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var steps: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var timestamp: Foundation.Date? {
    @objc get
    @objc set
  }
}
extension KoolingSDK.LocationEntityOld : Swift.Identifiable {
  public typealias ID = Foundation.UUID?
}
@_inheritsConvenienceInitializers @objc(LocationCoreDataEntity) public class LocationCoreDataEntity : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension KoolingSDK.LocationCoreDataEntity {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<KoolingSDK.LocationCoreDataEntity>
  @objc @NSManaged dynamic public var accuracy: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var activityType: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var altitude: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var bluetooth: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var coarse: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var distance: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var latitude: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var longitude: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var speed: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var timestamp: Foundation.Date? {
    @objc get
    @objc set
  }
}
extension KoolingSDK.LocationCoreDataEntity : Swift.Identifiable {
  public typealias ID = Swift.String?
}
@_inheritsConvenienceInitializers @objc(StepsAndDistanceCoreDataEntity) public class StepsAndDistanceCoreDataEntity : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension KoolingSDK.StepsAndDistanceCoreDataEntity {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<KoolingSDK.StepsAndDistanceCoreDataEntity>
  @objc @NSManaged dynamic public var creationDate: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var distance: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var steps: Swift.Double {
    @objc get
    @objc set
  }
}
extension KoolingSDK.StepsAndDistanceCoreDataEntity : Swift.Identifiable {
  public typealias ID = Swift.String?
}
extension KoolingSDK.KoolingEnvironment : Swift.Equatable {}
extension KoolingSDK.KoolingEnvironment : Swift.Hashable {}
extension KoolingSDK.KoolingHttpMethod : Swift.Equatable {}
extension KoolingSDK.KoolingHttpMethod : Swift.Hashable {}
extension KoolingSDK.KoolingEncoderType : Swift.Equatable {}
extension KoolingSDK.KoolingEncoderType : Swift.Hashable {}
